pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'your-registry'
        BACKEND_IMAGE = "${DOCKER_REGISTRY}/restaurant-backend"
        MENU_SERVICE_IMAGE = "${DOCKER_REGISTRY}/menu-service"
        ORDERS_SERVICE_IMAGE = "${DOCKER_REGISTRY}/orders-service"
        KUBE_CONFIG = credentials('kubernetes-config')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Run Tests') {
            steps {
                sh 'npm test'
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Build Backend') {
                    steps {
                        script {
                            docker.build("${BACKEND_IMAGE}:${BUILD_NUMBER}", ".")
                            docker.build("${BACKEND_IMAGE}:latest", ".")
                        }
                    }
                }
                stage('Build Menu Service') {
                    steps {
                        script {
                            docker.build("${MENU_SERVICE_IMAGE}:${BUILD_NUMBER}", "./services/menu")
                            docker.build("${MENU_SERVICE_IMAGE}:latest", "./services/menu")
                        }
                    }
                }
                stage('Build Orders Service') {
                    steps {
                        script {
                            docker.build("${ORDERS_SERVICE_IMAGE}:${BUILD_NUMBER}", "./services/orders")
                            docker.build("${ORDERS_SERVICE_IMAGE}:latest", "./services/orders")
                        }
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    docker.withRegistry(DOCKER_REGISTRY, 'docker-credentials') {
                        docker.image("${BACKEND_IMAGE}:${BUILD_NUMBER}").push()
                        docker.image("${BACKEND_IMAGE}:latest").push()
                        docker.image("${MENU_SERVICE_IMAGE}:${BUILD_NUMBER}").push()
                        docker.image("${MENU_SERVICE_IMAGE}:latest").push()
                        docker.image("${ORDERS_SERVICE_IMAGE}:${BUILD_NUMBER}").push()
                        docker.image("${ORDERS_SERVICE_IMAGE}:latest").push()
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh '''
                        kubectl --kubeconfig=$KUBE_CONFIG apply -f k8s/backend-deployment.yaml
                        kubectl --kubeconfig=$KUBE_CONFIG apply -f k8s/microservice-deployment.yaml
                        kubectl --kubeconfig=$KUBE_CONFIG apply -f k8s/nginx-ingress.yaml
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}